{"Name":"Android Support Library V7 RecyclerView","Id":2608,"Alias":"xamandroidsupportv7recyclerview","Description":"# v7 RecyclerView Android Support Library\n\nThe v7 RecyclerView Support Library adds the `RecyclerView` class. This class provides support for the RecyclerView widget, a view for efficiently displaying large data sets by providing a limited window of data items.\n\n\n\n## Android Support Libraries\n\nThe Android Support Libraries are a set of code libraries that provide backward-compatible versions of Android framework APIs as well as features that are only available through the library APIs. Each Support Library is backward-compatible to a specific Android API level. This design means that your applications can use the libraries\u0027 features and still be compatible with devices running older versions of Android.\n\nIncluding the Support Libraries in your Android project is considered a best practice for application developers, depending on the range of platform versions your app is targeting and the APIs that it uses. Using the features the libraries provide can help you improve the look of your application, increase performance and broaden the reach of your application to more users. \n\n\n","Version":"23.1.1.1","Summary":"Provide backward-compatible versions of Android framework APIs.","QuickStart":"The RecyclerView widget is a more advanced and flexible version of ListView. This widget is a container for displaying large data sets that can be scrolled very efficiently by maintaining a limited number of views. Use the RecyclerView widget when you have data collections whose elements change at runtime based on user action or network events.\n\nThe RecyclerView class simplifies the display and handling of large data sets by providing:\n\n - Layout managers for positioning items\n - Default animations for common item operations, such as removal or addition of items\n\nYou also have the flexibility to define custom layout managers and animations for RecyclerView widgets.\n\n\n### Target SDK Version \nNOTE: Using this support library requires that your app have its Target Android Version (*targetSdkVersion*) set to Lollipop (5.0 - API Level 21) or higher, or you will have *aapt* related compile errors.  You can still set the Target Framework which your app is compiled against as low as Android 4.0.3 (API Level 15).\n\n\nUsing RecyclerView\n------------------\n\nThe RecyclerView, like the ListView requires you to create an adapter.  You can subclass `RecyclerView.Adapter`:\n\n```csharp\npublic class MyAdapter : RecyclerView.Adapter\n{\n    string [] items;\n\n\tpublic MyAdapter (string [] data)\n\t{\n\t\titems = data;\n\t}\n\n\t// Create new views (invoked by the layout manager)\n\tpublic override RecyclerView.ViewHolder OnCreateViewHolder (ViewGroup parent, int viewType)\n\t{\t\n        // set the view\u0027s size, margins, paddings and layout parameters\n\t\tvar tv = new TextView (parent.Context);\n\t\ttv.SetWidth (200);\n\t\ttv.Text = \"\";\n\n\t\tvar vh = new MyViewHolder (tv);\n\t\treturn vh;\n\t} \n\n\t// Replace the contents of a view (invoked by the layout manager)\n\tpublic override void OnBindViewHolder (RecyclerView.ViewHolder viewHolder, int position)\n\t{\n        var item = items [position];\n\n\t\t// Replace the contents of the view with that element\n\t\tvar holder = viewHolder as MyViewHolder;\n\t\tholder.TextView.Text = items[position];\n\t}\n\n\tpublic override int ItemCount {\n\t\tget {\n\t\t\treturn items.Length;\n\t\t}\n\t}\n}\n```\n\nThe `ViewHolder` pattern is used to hold references to controls in a layout to avoid the more expensive operation of finding views by id over and over.  Here is an example of a custom `ViewHolder` used in the adapter above:\n\n```csharp\npublic class MyViewHolder : RecyclerView.ViewHolder \n{\n\tpublic TextView TextView { get; set; }\n\n\n\tpublic MyViewHolder (TextView v) : base (v)\n\t{\n\t\tTextView = v;\n\t}\n}\n```\n\nFinally, you need to setup your adapter and `RecyclerView`:\n\n```csharp\nrecyclerView = FindViewById\u003cRecyclerView\u003e (Resource.Id.my_recycler_view);\n\n// improve performance if you know that changes in content\n// do not change the size of the RecyclerView\nrecyclerView.HasFixedSize = true;\n\n// use a linear layout manager\nlayoutManager = new LinearLayoutManager (this);\nrecyclerView.SetLayoutManager (layoutManager);\n\n// specify an adapter\nadapter = new MyAdapter (new [] { \"Brasil\", \"Mexico\", \"United States\", \"Canada\" });\n\nrecyclerView.SetAdapter (adapter);\n```\n\nTo learn more about the RecyclerView, visit the [Official RecyclerView documentation](https://developer.android.com/training/material/lists-cards.html).\n","Hash":"5ef775fdaa3c67456d4d68254bd496e5","TargetPlatforms":["android"],"TrialHash":null}