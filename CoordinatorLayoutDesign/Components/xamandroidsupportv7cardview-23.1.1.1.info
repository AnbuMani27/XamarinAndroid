{"Name":"Android Support Library v7 CardView","Id":2605,"Alias":"xamandroidsupportv7cardview","Description":"# v7 CardView Android Support Library\n\nThis library adds support for the CardView widget, which lets you show information inside cards that have a consistent look on any app. These cards are useful for material design implementations, and are used extensively in layouts for TV apps.\n\n\n\n## Android Support Libraries\n\nThe Android Support Libraries are a set of code libraries that provide backward-compatible versions of Android framework APIs as well as features that are only available through the library APIs. Each Support Library is backward-compatible to a specific Android API level. This design means that your applications can use the libraries\u0027 features and still be compatible with devices running older versions of Android.\n\nIncluding the Support Libraries in your Android project is considered a best practice for application developers, depending on the range of platform versions your app is targeting and the APIs that it uses. Using the features the libraries provide can help you improve the look of your application, increase performance and broaden the reach of your application to more users. \n\n\n","Version":"23.1.1.1","Summary":"Provide backward-compatible versions of Android framework APIs.","QuickStart":"v7 Support CardView Library\n=========================\n\nCardView extends the FrameLayout class and lets you show information inside cards that have a consistent look across the platform. CardView widgets can have shadows and rounded corners.\n\n\n### Target SDK Version \nNOTE: Using this support library requires that your app have its Target Android Version (*targetSdkVersion*) set to Lollipop (5.0 - API Level 21) or higher, or you will have *aapt* related compile errors.  You can still set the Target Framework which your app is compiled against as low as Android 4.0.3 (API Level 15).\n\n\nUsing CardView in your layouts\n------------------------------\nUsing a CardView is simple, since it acts the same as a FrameLayout container.  You can create a CardView directly in your layout file and add child controls to it just as you would a FrameLayout.\n\n```xml\n\u003candroid.support.v7.widget.CardView \n  xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n  android:id=\"@+id/cardView\"\n  android:layout_gravity=\"center\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:padding=\"20dp\"\n  card_view:cardUseCompatPadding=\"true\"\n  card_view:cardCornerRadius=\"4dp\"\n  card_view:cardElevation=\"4dp\"\n  card_view:contentPadding=\"10dp\"\u003e\n  \u003cTextView\n    android:id=\"@+id/infoText\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:text=\"This is inside a CardView\" /\u003e\n\u003c/android.support.v7.widget.CardView\u003e\n```\nFrom the example you can see that you are able to change the corner radius of the CardView, set the padding, as well as the elevation (which will generate a shadow).\n\nPlease see the [Google CardView documentation](https://developer.android.com/training/material/lists-cards.html#CardView) for more information.","Hash":"e03010a79602478deb826975e8bef9b2","TargetPlatforms":["android"],"TrialHash":null}